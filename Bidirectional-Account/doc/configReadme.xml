<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce To Database Account Bidirectional Synchronization</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
			This template helps you create an online bidirectional sync of accounts between Salesforce and database instances with ability to specify filtering criteria.
The main behavior of this template fetches data for changes (new or modified accounts) that have occurred in Salesforce and database instances during a certain defined period of time. For those accounts that were identified as not present in the target instance, the integration triggers an insert or update operation on the existence of the object in the target instance taking the last modification of the object as the one that should be applied.
		</section>
		<section id="considerations">
<![CDATA[
**Note:** This template illustrates the migration use case between Salesforce and database, thus it requires Account instances to work.
The template comes packaged with a SQL script to create the database table it uses. 
It is your responsibility to use the provided script to create the table in an available schema and change the configuration accordingly.
The SQL script file can be found in src/main/resources/ of this project.

This template is customized for MySQL. To use it with a different SQL implementation:

* Update the SQL script dialect to the desired one.
* Replace the MySQL driver library (or add another) dependency to the desired one in the pom.xml file.
* Update the database config to a suitable connection instead of `db:my-sql-connection` in global elements (config.xml).
* Update the connection configurations in `mule.*.properties` file.

To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, 
that must be made for all to run smoothly. Failing to do so could lead to unexpected behavior of the template.
]]>
		</section>
		<section id="run_it">
<![CDATA[
To have your application up and running, complete two simple steps:
 1. Configure the application properties.
 2. Run it on premises or in CloudHub.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
To create your application in CloudHub, go to Deployment > Advanced to set all environment variables detailed in "*Properties to Configure" as well as in **mule.env**. 
]]>
		</section>
		<section id="default_running_on_standalone">
<![CDATA[
Fill in all properties in one of the property files, for example in mule.dev.properties and run your app 
with the corresponding environment variable to use it. To follow the example, this is `mule.env=dev`.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
		
#### Application Configuration

+ scheduler.frequency `10000`  
This is the milliseconds to run between two different checks for updates in either the database instance or Salesforce instance.
+ scheduler.startDelay `0`
+ watermark.default.expression `2018-02-25T11:00:00.000Z`  
This property important as it configures what should be the start point of the synchronization. If the use case includes synchronizing every 
account created from the beginning of time, you should use a date previous to any account creation, such as `1900-01-01T08:00:00.000Z`. 
If you want to synchronize the accounts created from now on, then use a default value according to that requirement. For example, 
if today is April 21, 2018 and it's eleven o'clock in London, then you could use the following value `2018-04-21T11:00:00.000Z`).
+ page.size `1000`

#### SalesForce Connector Configuration

+ sfdc.username `jorge.drexler@mail.com`
+ sfdc.password `Noctiluca123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.integration.user.id `005n0000000T3QkAAK`
	**Note:** To find the correct *sfdc.integration.user.id* value, refer to the example project **Salesforce Data Retrieval** in Anypoint Exchange.

#### Database Connector Configuration

+ db.host `localhost`
+ db.port `3306`
+ db.databaseName `dbname`
+ db.user `user-name`
+ db.password `user-password`
+ db.integration.user.id `user-id`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Not relevant for this use case.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This file contains every inbound and outbound endpoint of your integration app. 
In this template, this file contains a scheduler endpoint that queries Salesforce and the database for updates using watermark.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
This file holds the functional aspect of the template. Its main component is a batch job, and it includes steps for both executing the synchronization from Salesforce to the database, and the other way around.
]]>
		</section>
		<section id="default_error_handling_xml">
		<![CDATA[
		This file handles how your integration reacts depending on the different exceptions. 
This file provides error handling that is referenced by the scheduler flow in the endpoints XML file.]]>
		</section>
	</sections>
</configuration>
